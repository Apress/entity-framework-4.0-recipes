//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace BookingEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TravelAgent))]
    public partial class Booking: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int BookingId
        {
            get { return _bookingId; }
            set
            {
                if (_bookingId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BookingId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _bookingId = value;
                    OnPropertyChanged("BookingId");
                }
            }
        }
        private int _bookingId;
    
        [DataMember]
        public int AgentId
        {
            get { return _agentId; }
            set
            {
                if (_agentId != value)
                {
                    ChangeTracker.RecordOriginalValue("AgentId", _agentId);
                    if (!IsDeserializing)
                    {
                        if (TravelAgent != null && TravelAgent.AgentId != value)
                        {
                            TravelAgent = null;
                        }
                    }
                    _agentId = value;
                    OnPropertyChanged("AgentId");
                }
            }
        }
        private int _agentId;
    
        [DataMember]
        public string Customer
        {
            get { return _customer; }
            set
            {
                if (_customer != value)
                {
                    _customer = value;
                    OnPropertyChanged("Customer");
                }
            }
        }
        private string _customer;
    
        [DataMember]
        public System.DateTime BookingDate
        {
            get { return _bookingDate; }
            set
            {
                if (_bookingDate != value)
                {
                    _bookingDate = value;
                    OnPropertyChanged("BookingDate");
                }
            }
        }
        private System.DateTime _bookingDate;
    
        [DataMember]
        public bool Paid
        {
            get { return _paid; }
            set
            {
                if (_paid != value)
                {
                    _paid = value;
                    OnPropertyChanged("Paid");
                }
            }
        }
        private bool _paid;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TravelAgent TravelAgent
        {
            get { return _travelAgent; }
            set
            {
                if (!ReferenceEquals(_travelAgent, value))
                {
                    var previousValue = _travelAgent;
                    _travelAgent = value;
                    FixupTravelAgent(previousValue);
                    OnNavigationPropertyChanged("TravelAgent");
                }
            }
        }
        private TravelAgent _travelAgent;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TravelAgent = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupTravelAgent(TravelAgent previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Bookings.Contains(this))
            {
                previousValue.Bookings.Remove(this);
            }
    
            if (TravelAgent != null)
            {
                if (!TravelAgent.Bookings.Contains(this))
                {
                    TravelAgent.Bookings.Add(this);
                }
    
                AgentId = TravelAgent.AgentId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TravelAgent")
                    && (ChangeTracker.OriginalValues["TravelAgent"] == TravelAgent))
                {
                    ChangeTracker.OriginalValues.Remove("TravelAgent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TravelAgent", previousValue);
                }
                if (TravelAgent != null && !TravelAgent.ChangeTracker.ChangeTrackingEnabled)
                {
                    TravelAgent.StartTracking();
                }
            }
        }

        #endregion
    }
}
