//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MediaEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MediaType))]
    [KnownType(typeof(Category))]
    public partial class Medium: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int MediaId
        {
            get { return _mediaId; }
            set
            {
                if (_mediaId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MediaId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _mediaId = value;
                    OnPropertyChanged("MediaId");
                }
            }
        }
        private int _mediaId;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public int MediaTypeId
        {
            get { return _mediaTypeId; }
            set
            {
                if (_mediaTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("MediaTypeId", _mediaTypeId);
                    if (!IsDeserializing)
                    {
                        if (MediaType != null && MediaType.MediaTypeId != value)
                        {
                            MediaType = null;
                        }
                    }
                    _mediaTypeId = value;
                    OnPropertyChanged("MediaTypeId");
                }
            }
        }
        private int _mediaTypeId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public MediaType MediaType
        {
            get { return _mediaType; }
            set
            {
                if (!ReferenceEquals(_mediaType, value))
                {
                    var previousValue = _mediaType;
                    _mediaType = value;
                    FixupMediaType(previousValue);
                    OnNavigationPropertyChanged("MediaType");
                }
            }
        }
        private MediaType _mediaType;
    
        [DataMember]
        public TrackableCollection<Category> Categories
        {
            get
            {
                if (_categories == null)
                {
                    _categories = new TrackableCollection<Category>();
                    _categories.CollectionChanged += FixupCategories;
                }
                return _categories;
            }
            set
            {
                if (!ReferenceEquals(_categories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_categories != null)
                    {
                        _categories.CollectionChanged -= FixupCategories;
                    }
                    _categories = value;
                    if (_categories != null)
                    {
                        _categories.CollectionChanged += FixupCategories;
                    }
                    OnNavigationPropertyChanged("Categories");
                }
            }
        }
        private TrackableCollection<Category> _categories;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MediaType = null;
            Categories.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupMediaType(MediaType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Media.Contains(this))
            {
                previousValue.Media.Remove(this);
            }
    
            if (MediaType != null)
            {
                if (!MediaType.Media.Contains(this))
                {
                    MediaType.Media.Add(this);
                }
    
                MediaTypeId = MediaType.MediaTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MediaType")
                    && (ChangeTracker.OriginalValues["MediaType"] == MediaType))
                {
                    ChangeTracker.OriginalValues.Remove("MediaType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MediaType", previousValue);
                }
                if (MediaType != null && !MediaType.ChangeTracker.ChangeTrackingEnabled)
                {
                    MediaType.StartTracking();
                }
            }
        }
    
        private void FixupCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Category item in e.NewItems)
                {
                    if (!item.Media.Contains(this))
                    {
                        item.Media.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Categories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Category item in e.OldItems)
                {
                    if (item.Media.Contains(this))
                    {
                        item.Media.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Categories", item);
                    }
                }
            }
        }

        #endregion
    }
}
