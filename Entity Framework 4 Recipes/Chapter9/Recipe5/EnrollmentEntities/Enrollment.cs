//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EnrollmentEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Course))]
    [KnownType(typeof(Student))]
    public partial class Enrollment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int EnrollmentId
        {
            get { return _enrollmentId; }
            set
            {
                if (_enrollmentId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EnrollmentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _enrollmentId = value;
                    OnPropertyChanged("EnrollmentId");
                }
            }
        }
        private int _enrollmentId;
    
        [DataMember]
        public int StudentId
        {
            get { return _studentId; }
            set
            {
                if (_studentId != value)
                {
                    ChangeTracker.RecordOriginalValue("StudentId", _studentId);
                    if (!IsDeserializing)
                    {
                        if (Student != null && Student.StudentId != value)
                        {
                            Student = null;
                        }
                    }
                    _studentId = value;
                    OnPropertyChanged("StudentId");
                }
            }
        }
        private int _studentId;
    
        [DataMember]
        public int CourseId
        {
            get { return _courseId; }
            set
            {
                if (_courseId != value)
                {
                    ChangeTracker.RecordOriginalValue("CourseId", _courseId);
                    if (!IsDeserializing)
                    {
                        if (Course != null && Course.CourseId != value)
                        {
                            Course = null;
                        }
                    }
                    _courseId = value;
                    OnPropertyChanged("CourseId");
                }
            }
        }
        private int _courseId;
    
        [DataMember]
        public bool Paid
        {
            get { return _paid; }
            set
            {
                if (_paid != value)
                {
                    _paid = value;
                    OnPropertyChanged("Paid");
                }
            }
        }
        private bool _paid;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Course Course
        {
            get { return _course; }
            set
            {
                if (!ReferenceEquals(_course, value))
                {
                    var previousValue = _course;
                    _course = value;
                    FixupCourse(previousValue);
                    OnNavigationPropertyChanged("Course");
                }
            }
        }
        private Course _course;
    
        [DataMember]
        public Student Student
        {
            get { return _student; }
            set
            {
                if (!ReferenceEquals(_student, value))
                {
                    var previousValue = _student;
                    _student = value;
                    FixupStudent(previousValue);
                    OnNavigationPropertyChanged("Student");
                }
            }
        }
        private Student _student;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Course = null;
            Student = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCourse(Course previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Enrollments.Contains(this))
            {
                previousValue.Enrollments.Remove(this);
            }
    
            if (Course != null)
            {
                if (!Course.Enrollments.Contains(this))
                {
                    Course.Enrollments.Add(this);
                }
    
                CourseId = Course.CourseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Course")
                    && (ChangeTracker.OriginalValues["Course"] == Course))
                {
                    ChangeTracker.OriginalValues.Remove("Course");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Course", previousValue);
                }
                if (Course != null && !Course.ChangeTracker.ChangeTrackingEnabled)
                {
                    Course.StartTracking();
                }
            }
        }
    
        private void FixupStudent(Student previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Enrollments.Contains(this))
            {
                previousValue.Enrollments.Remove(this);
            }
    
            if (Student != null)
            {
                if (!Student.Enrollments.Contains(this))
                {
                    Student.Enrollments.Add(this);
                }
    
                StudentId = Student.StudentId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Student")
                    && (ChangeTracker.OriginalValues["Student"] == Student))
                {
                    ChangeTracker.OriginalValues.Remove("Student");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Student", previousValue);
                }
                if (Student != null && !Student.ChangeTracker.ChangeTrackingEnabled)
                {
                    Student.StartTracking();
                }
            }
        }

        #endregion
    }
}
