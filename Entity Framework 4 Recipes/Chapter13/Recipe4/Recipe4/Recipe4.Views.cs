





//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets310356B7BC041F7F9ED08BDCE21BC681))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets310356B7BC041F7F9ED08BDCE21BC681 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets310356B7BC041F7F9ED08BDCE21BC681()
        {
            this.EdmEntityContainerName = "EFRecipesEntities";
            this.StoreEntityContainerName = "EFRecipesModelStoreContainer";
            this.HashOverMappingClosure = "99af8533fce200dd54b9422a62786038";
            this.HashOverAllExtentViews = "c24539ec362da783d0b3436bcc2e2beb";
            this.ViewCount = 10;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder();
            if ((index == 0))
            {
                // return view for EFRecipesModelStoreContainer.Client
                viewString.Append(@"
    SELECT VALUE -- Constructing Client
        [EFRecipesModel.Store.Client](T1.Client_ClientId, T1.Client_Name, T1.Client_AccountantId)
    FROM (
        SELECT 
            T.ClientId AS Client_ClientId, 
            T.Name AS Client_Name, 
            T.AccountantId AS Client_AccountantId, 
            True AS _from0
        FROM EFRecipesEntities.Clients AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesModelStoreContainer.Client", viewString.ToString());
            }
            if ((index == 1))
            {
                // return view for EFRecipesModelStoreContainer.College
                viewString.Append(@"
    SELECT VALUE -- Constructing College
        [EFRecipesModel.Store.College](T1.College_CollegeId, T1.College_Name)
    FROM (
        SELECT 
            T.CollegeId AS College_CollegeId, 
            T.Name AS College_Name, 
            True AS _from0
        FROM EFRecipesEntities.Colleges AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesModelStoreContainer.College", viewString.ToString());
            }
            if ((index == 2))
            {
                // return view for EFRecipesModelStoreContainer.CourtDate
                viewString.Append(@"
    SELECT VALUE -- Constructing CourtDate
        [EFRecipesModel.Store.CourtDate](T1.CourtDate_AppointmentId, T1.CourtDate_CourtDate, T1.CourtDate_Name, T1.CourtDate_LawyerId)
    FROM (
        SELECT 
            T.AppointmentId AS CourtDate_AppointmentId, 
            T.Appointment AS CourtDate_CourtDate, 
            T.Name AS CourtDate_Name, 
            T.LawyerId AS CourtDate_LawyerId, 
            True AS _from0
        FROM EFRecipesEntities.CourtDates AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesModelStoreContainer.CourtDate", viewString.ToString());
            }
            if ((index == 3))
            {
                // return view for EFRecipesModelStoreContainer.Person
                viewString.Append(@"
    SELECT VALUE -- Constructing Person
        [EFRecipesModel.Store.Person](T1.Person_PersonId, T1.Person_Name, T1.Person_CollegeId)
    FROM (
        SELECT 
            T.PersonId AS Person_PersonId, 
            T.Name AS Person_Name, 
            T.CollegeId AS Person_CollegeId, 
            True AS _from0
        FROM EFRecipesEntities.People AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesModelStoreContainer.Person", viewString.ToString());
            }
            if ((index == 4))
            {
                // return view for EFRecipesModelStoreContainer.Accountant
                viewString.Append(@"
    SELECT VALUE -- Constructing Accountant
        [EFRecipesModel.Store.Accountant](T1.Accountant_PersonId)
    FROM (
        SELECT 
            T.PersonId AS Accountant_PersonId, 
            True AS _from0
        FROM EFRecipesEntities.People AS T
        WHERE T IS OF (ONLY [EFRecipesModel.Accountant])
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesModelStoreContainer.Accountant", viewString.ToString());
            }
            if ((index == 5))
            {
                // return view for EFRecipesModelStoreContainer.Lawyer
                viewString.Append(@"
    SELECT VALUE -- Constructing Lawyer
        [EFRecipesModel.Store.Lawyer](T1.Lawyer_PersonId)
    FROM (
        SELECT 
            T.PersonId AS Lawyer_PersonId, 
            True AS _from0
        FROM EFRecipesEntities.People AS T
        WHERE T IS OF (ONLY [EFRecipesModel.Lawyer])
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesModelStoreContainer.Lawyer", viewString.ToString());
            }
            if ((index == 6))
            {
                // return view for EFRecipesEntities.Clients
                viewString.Append(@"
    SELECT VALUE -- Constructing Clients
        [EFRecipesModel.Client](T1.Client_ClientId, T1.Client_Name, T1.Client_AccountantId)
    FROM (
        SELECT 
            T.ClientId AS Client_ClientId, 
            T.Name AS Client_Name, 
            T.AccountantId AS Client_AccountantId, 
            True AS _from0
        FROM EFRecipesModelStoreContainer.Client AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesEntities.Clients", viewString.ToString());
            }
            if ((index == 7))
            {
                // return view for EFRecipesEntities.Colleges
                viewString.Append(@"
    SELECT VALUE -- Constructing Colleges
        [EFRecipesModel.College](T1.College_CollegeId, T1.College_Name)
    FROM (
        SELECT 
            T.CollegeId AS College_CollegeId, 
            T.Name AS College_Name, 
            True AS _from0
        FROM EFRecipesModelStoreContainer.College AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesEntities.Colleges", viewString.ToString());
            }
            if ((index == 8))
            {
                // return view for EFRecipesEntities.CourtDates
                viewString.Append(@"
    SELECT VALUE -- Constructing CourtDates
        [EFRecipesModel.CourtDate](T1.CourtDate_AppointmentId, T1.CourtDate_Appointment, T1.CourtDate_Name, T1.CourtDate_LawyerId)
    FROM (
        SELECT 
            T.AppointmentId AS CourtDate_AppointmentId, 
            T.CourtDate AS CourtDate_Appointment, 
            T.Name AS CourtDate_Name, 
            T.LawyerId AS CourtDate_LawyerId, 
            True AS _from0
        FROM EFRecipesModelStoreContainer.CourtDate AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesEntities.CourtDates", viewString.ToString());
            }
            if ((index == 9))
            {
                // return view for EFRecipesEntities.People
                viewString.Append(@"
    SELECT VALUE -- Constructing People
        CASE
            WHEN (NOT(T5._from1) AND NOT(T5._from2)) THEN [EFRecipesModel.Person](T5.Person_PersonId, T5.Person_Name, T5.Person_CollegeId)
            WHEN T5._from1 THEN [EFRecipesModel.Accountant](T5.Person_PersonId, T5.Person_Name, T5.Person_CollegeId)
            ELSE [EFRecipesModel.Lawyer](T5.Person_PersonId, T5.Person_Name, T5.Person_CollegeId)
        END
    FROM (
        SELECT T1.Person_PersonId, T1.Person_Name, T1.Person_CollegeId, T1._from0, (T4._from1 AND T4._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.PersonId AS Person_PersonId, 
                T.Name AS Person_Name, 
                T.CollegeId AS Person_CollegeId, 
                True AS _from0
            FROM EFRecipesModelStoreContainer.Person AS T) AS T1
            LEFT OUTER JOIN ( (
                SELECT 
                    T.PersonId AS Person_PersonId, 
                    True AS _from1, 
                    False AS _from2
                FROM EFRecipesModelStoreContainer.Accountant AS T)
                UNION ALL (
                SELECT 
                    T.PersonId AS Person_PersonId, 
                    False AS _from1, 
                    True AS _from2
                FROM EFRecipesModelStoreContainer.Lawyer AS T)) AS T4
            ON T1.Person_PersonId = T4.Person_PersonId
    ) AS T5");
                return new System.Collections.Generic.KeyValuePair<string, string>("EFRecipesEntities.People", viewString.ToString());
            }
            throw new System.IndexOutOfRangeException();
        }
    }
}


