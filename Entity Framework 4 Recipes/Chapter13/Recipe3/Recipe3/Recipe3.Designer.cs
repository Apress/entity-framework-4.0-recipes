//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("EFRecipesModel", "FK_Appointment_Doctor", "Doctor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Recipe3.Doctor), "Appointment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Recipe3.Appointment), true)]
[assembly: EdmRelationshipAttribute("EFRecipesModel", "FK_Doctor_Company", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Recipe3.Company), "Doctor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Recipe3.Doctor), true)]

#endregion

namespace Recipe3
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class EFRecipesEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new EFRecipesEntities object using the connection string found in the 'EFRecipesEntities' section of the application configuration file.
        /// </summary>
        public EFRecipesEntities() : base("name=EFRecipesEntities", "EFRecipesEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EFRecipesEntities object.
        /// </summary>
        public EFRecipesEntities(string connectionString) : base(connectionString, "EFRecipesEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EFRecipesEntities object.
        /// </summary>
        public EFRecipesEntities(EntityConnection connection) : base(connection, "EFRecipesEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Appointment> Appointments
        {
            get
            {
                if ((_Appointments == null))
                {
                    _Appointments = base.CreateObjectSet<Appointment>("Appointments");
                }
                return _Appointments;
            }
        }
        private ObjectSet<Appointment> _Appointments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Company> Companies
        {
            get
            {
                if ((_Companies == null))
                {
                    _Companies = base.CreateObjectSet<Company>("Companies");
                }
                return _Companies;
            }
        }
        private ObjectSet<Company> _Companies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Doctor> Doctors
        {
            get
            {
                if ((_Doctors == null))
                {
                    _Doctors = base.CreateObjectSet<Doctor>("Doctors");
                }
                return _Doctors;
            }
        }
        private ObjectSet<Doctor> _Doctors;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Appointments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAppointments(Appointment appointment)
        {
            base.AddObject("Appointments", appointment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Companies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanies(Company company)
        {
            base.AddObject("Companies", company);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Doctors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDoctors(Doctor doctor)
        {
            base.AddObject("Doctors", doctor);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EFRecipesModel", Name="Appointment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Appointment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Appointment object.
        /// </summary>
        /// <param name="appointmentId">Initial value of the AppointmentId property.</param>
        /// <param name="appointmentDate">Initial value of the AppointmentDate property.</param>
        /// <param name="patient">Initial value of the Patient property.</param>
        /// <param name="doctorId">Initial value of the DoctorId property.</param>
        public static Appointment CreateAppointment(global::System.Int32 appointmentId, global::System.DateTime appointmentDate, global::System.String patient, global::System.Int32 doctorId)
        {
            Appointment appointment = new Appointment();
            appointment.AppointmentId = appointmentId;
            appointment.AppointmentDate = appointmentDate;
            appointment.Patient = patient;
            appointment.DoctorId = doctorId;
            return appointment;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AppointmentId
        {
            get
            {
                return _AppointmentId;
            }
            set
            {
                if (_AppointmentId != value)
                {
                    OnAppointmentIdChanging(value);
                    ReportPropertyChanging("AppointmentId");
                    _AppointmentId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AppointmentId");
                    OnAppointmentIdChanged();
                }
            }
        }
        private global::System.Int32 _AppointmentId;
        partial void OnAppointmentIdChanging(global::System.Int32 value);
        partial void OnAppointmentIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime AppointmentDate
        {
            get
            {
                return _AppointmentDate;
            }
            set
            {
                OnAppointmentDateChanging(value);
                ReportPropertyChanging("AppointmentDate");
                _AppointmentDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AppointmentDate");
                OnAppointmentDateChanged();
            }
        }
        private global::System.DateTime _AppointmentDate;
        partial void OnAppointmentDateChanging(global::System.DateTime value);
        partial void OnAppointmentDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Patient
        {
            get
            {
                return _Patient;
            }
            set
            {
                OnPatientChanging(value);
                ReportPropertyChanging("Patient");
                _Patient = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Patient");
                OnPatientChanged();
            }
        }
        private global::System.String _Patient;
        partial void OnPatientChanging(global::System.String value);
        partial void OnPatientChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                OnDoctorIdChanging(value);
                ReportPropertyChanging("DoctorId");
                _DoctorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DoctorId");
                OnDoctorIdChanged();
            }
        }
        private global::System.Int32 _DoctorId;
        partial void OnDoctorIdChanging(global::System.Int32 value);
        partial void OnDoctorIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EFRecipesModel", "FK_Appointment_Doctor", "Doctor")]
        public Doctor Doctor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("EFRecipesModel.FK_Appointment_Doctor", "Doctor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("EFRecipesModel.FK_Appointment_Doctor", "Doctor").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctor> DoctorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("EFRecipesModel.FK_Appointment_Doctor", "Doctor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctor>("EFRecipesModel.FK_Appointment_Doctor", "Doctor", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EFRecipesModel", Name="Company")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Company : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Company object.
        /// </summary>
        /// <param name="companyId">Initial value of the CompanyId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Company CreateCompany(global::System.Int32 companyId, global::System.String name)
        {
            Company company = new Company();
            company.CompanyId = companyId;
            company.Name = name;
            return company;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CompanyId
        {
            get
            {
                return _CompanyId;
            }
            set
            {
                if (_CompanyId != value)
                {
                    OnCompanyIdChanging(value);
                    ReportPropertyChanging("CompanyId");
                    _CompanyId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CompanyId");
                    OnCompanyIdChanged();
                }
            }
        }
        private global::System.Int32 _CompanyId;
        partial void OnCompanyIdChanging(global::System.Int32 value);
        partial void OnCompanyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EFRecipesModel", "FK_Doctor_Company", "Doctor")]
        public EntityCollection<Doctor> Doctors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Doctor>("EFRecipesModel.FK_Doctor_Company", "Doctor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Doctor>("EFRecipesModel.FK_Doctor_Company", "Doctor", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EFRecipesModel", Name="Doctor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Doctor : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Doctor object.
        /// </summary>
        /// <param name="doctorId">Initial value of the DoctorId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="companyId">Initial value of the CompanyId property.</param>
        public static Doctor CreateDoctor(global::System.Int32 doctorId, global::System.String name, global::System.Int32 companyId)
        {
            Doctor doctor = new Doctor();
            doctor.DoctorId = doctorId;
            doctor.Name = name;
            doctor.CompanyId = companyId;
            return doctor;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                if (_DoctorId != value)
                {
                    OnDoctorIdChanging(value);
                    ReportPropertyChanging("DoctorId");
                    _DoctorId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DoctorId");
                    OnDoctorIdChanged();
                }
            }
        }
        private global::System.Int32 _DoctorId;
        partial void OnDoctorIdChanging(global::System.Int32 value);
        partial void OnDoctorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CompanyId
        {
            get
            {
                return _CompanyId;
            }
            set
            {
                OnCompanyIdChanging(value);
                ReportPropertyChanging("CompanyId");
                _CompanyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompanyId");
                OnCompanyIdChanged();
            }
        }
        private global::System.Int32 _CompanyId;
        partial void OnCompanyIdChanging(global::System.Int32 value);
        partial void OnCompanyIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EFRecipesModel", "FK_Appointment_Doctor", "Appointment")]
        public EntityCollection<Appointment> Appointments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Appointment>("EFRecipesModel.FK_Appointment_Doctor", "Appointment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Appointment>("EFRecipesModel.FK_Appointment_Doctor", "Appointment", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EFRecipesModel", "FK_Doctor_Company", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("EFRecipesModel.FK_Doctor_Company", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("EFRecipesModel.FK_Doctor_Company", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("EFRecipesModel.FK_Doctor_Company", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("EFRecipesModel.FK_Doctor_Company", "Company", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
